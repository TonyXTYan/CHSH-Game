name: Python Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Setting default permissions to read-only
permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/load_test/load_test_requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r load_test/load_test_requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Test with pytest and generate coverage report
      run: |
        pytest --cov=src --cov-branch --cov-report=xml tests/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        
  release:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: write  # Required for creating releases
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get latest release version and increment
        id: get_version
        run: |
          # Get latest release or set default
          LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          
          # Check if there are any releases
          if [ "$(echo "$LATEST_RELEASE" | jq length)" = "0" ]; then
            LATEST_VERSION="v0.0.0"
          else
            LATEST_VERSION=$(echo "$LATEST_RELEASE" | jq -r '.[0].tag_name')
            if [ "$LATEST_VERSION" = "null" ] || [ -z "$LATEST_VERSION" ]; then
              LATEST_VERSION="v0.0.0"
            fi
          fi
          echo "Current version: $LATEST_VERSION"
          
          # Parse version and increment patch number
          if [[ $LATEST_VERSION =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
          else
            NEW_VERSION="v0.0.1"
          fi
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Delete previous pre-release and tag if it exists
        if: steps.get_version.outputs.new_version != 'v0.0.1' # Only run if not the first release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          PREV_VERSION="${{ steps.get_version.outputs.new_version }}"
          # Get the previous release info
          PREV_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/releases/tags/$PREV_VERSION")
          # Check if it's a pre-release
          IS_PRERELEASE=$(echo "$PREV_RELEASE" | jq -r '.prerelease')
          RELEASE_ID=$(echo "$PREV_RELEASE" | jq -r '.id')
          if [ "$IS_PRERELEASE" = "true" ] && [ "$RELEASE_ID" != "null" ]; then
            echo "Deleting previous pre-release $PREV_VERSION (ID: $RELEASE_ID)"
            # Delete the release
            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/releases/$RELEASE_ID"
            # Delete the tag
            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/git/refs/tags/$PREV_VERSION"
          else
            echo "No previous pre-release to delete."
          fi
          
      - name: Create GitHub Pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.new_version }}
          name: Release ${{ steps.get_version.outputs.new_version }}
          draft: false
          prerelease: true
          body: |
            Automated pre-release for version ${{ steps.get_version.outputs.new_version }}
            
            Changes in this release:
            ${{ github.event.head_commit.message }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}