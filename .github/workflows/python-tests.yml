name: Python Tests

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.2.3
  pull_request:
    branches: [ main, master ]

# Setting default permissions to read-only
permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/load_test/load_test_requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r load_test/load_test_requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Start Flask server (background)
      run: |
        gunicorn wsgi:app --worker-class eventlet --bind 0.0.0.0:8080 &
        sleep 5

    - name: Test with pytest and generate coverage report
      run: |
        pytest --cov=src --cov-branch --cov-report=xml tests/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Run mypy type checking
      continue-on-error: true
      run: |
        echo "Running mypy type checking..."
        mypy src || echo "mypy found type issues (non-blocking)"
        
    - name: Run pyright type checking
      continue-on-error: true
      run: |
        echo "Running pyright type checking..."
        pyright || echo "pyright found type issues (non-blocking)"
        
  release:
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write  # Required for creating releases
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version from tag
        id: get_version
        run: |
          # Extract version from the git tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Version from tag: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: true
          body: |
            Automated pre-release for version ${{ steps.get_version.outputs.version }}
            
            Changes in this release:
            ${{ github.event.head_commit.message }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}